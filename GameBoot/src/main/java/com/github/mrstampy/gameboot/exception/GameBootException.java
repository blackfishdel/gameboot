/*
 *              ______                        ____              __ 
 *             / ____/___ _____ ___  ___     / __ )____  ____  / /_
 *            / / __/ __ `/ __ `__ \/ _ \   / __  / __ \/ __ \/ __/
 *           / /_/ / /_/ / / / / / /  __/  / /_/ / /_/ / /_/ / /_  
 *           \____/\__,_/_/ /_/ /_/\___/  /_____/\____/\____/\__/  
 *                                                 
 *                                 .-'\
 *                              .-'  `/\
 *                           .-'      `/\
 *                           \         `/\
 *                            \         `/\
 *                             \    _-   `/\       _.--.
 *                              \    _-   `/`-..--\     )
 *                               \    _-   `,','  /    ,')
 *                                `-_   -   ` -- ~   ,','
 *                                 `-              ,','
 *                                  \,--.    ____==-~
 *                                   \   \_-~\
 *                                    `_-~_.-'
 *                                     \-~
 * 
 *                       http://mrstampy.github.io/gameboot/
 *
 * Copyright (C) 2015, 2016 Burton Alexander
 * 
 * This program is free software; you can redistribute it and/or modify it under
 * the terms of the GNU General Public License as published by the Free Software
 * Foundation; either version 2 of the License, or (at your option) any later
 * version.
 * 
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU General Public License for more
 * details.
 * 
 * You should have received a copy of the GNU General Public License along with
 * this program; if not, write to the Free Software Foundation, Inc., 51
 * Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.
 * 
 */
package com.github.mrstampy.gameboot.exception;

import com.github.mrstampy.gameboot.messages.context.ResponseContext;

/**
 * Checked exception generated by GameBoot.
 */
public class GameBootException extends Exception implements GameBootThrowable {

  private static final long serialVersionUID = -3167138308922775541L;

  private Object[] payload;

  private ResponseContext error;

  private Integer errorCode;

  /**
   * Instantiates a new game boot exception.
   *
   * @param error
   *          the error
   * @param payload
   *          the payload
   */
  public GameBootException(ResponseContext error, Object... payload) {
    super();
    setPayload(payload);
    setError(error);
  }

  /**
   * Instantiates a new game boot exception.
   *
   * @param message
   *          the message
   * @param error
   *          the error
   * @param payload
   *          the payload
   */
  public GameBootException(String message, ResponseContext error, Object... payload) {
    super(message);
    setPayload(payload);
    setError(error);
  }

  /**
   * Instantiates a new game boot exception.
   *
   * @param errorCode
   *          the error code
   * @param payload
   *          the payload
   */
  public GameBootException(Integer errorCode, Object... payload) {
    super();
    setErrorCode(errorCode);
    setPayload(payload);
  }

  /**
   * Instantiates a new game boot exception.
   *
   * @param message
   *          the message
   * @param errorCode
   *          the error code
   * @param payload
   *          the payload
   */
  public GameBootException(String message, Integer errorCode, Object... payload) {
    super(message);
    setErrorCode(errorCode);
    setPayload(payload);
  }

  /*
   * (non-Javadoc)
   * 
   * @see com.github.mrstampy.gameboot.exception.GameBootThrowable#hasPayload()
   */
  /**
   * Checks for payload.
   *
   * @return true, if successful
   */
  @Override
  public boolean hasPayload() {
    return payload != null && payload.length > 0;
  }

  /*
   * (non-Javadoc)
   * 
   * @see com.github.mrstampy.gameboot.exception.GameBootThrowable#getPayload()
   */
  /**
   * Gets the payload.
   *
   * @return the payload
   */
  @Override
  public Object[] getPayload() {
    return payload;
  }

  /*
   * (non-Javadoc)
   * 
   * @see
   * com.github.mrstampy.gameboot.exception.GameBootThrowable#setPayload(java.
   * lang.Object[])
   */
  /**
   * Sets the payload.
   *
   * @param payload
   *          the new payload
   */
  @Override
  public void setPayload(Object[] payload) {
    if (payload != null && payload.length == 0) payload = null;
    this.payload = payload;
  }

  /*
   * (non-Javadoc)
   * 
   * @see com.github.mrstampy.gameboot.exception.GameBootThrowable#getError()
   */
  /**
   * Gets the error.
   *
   * @return the error
   */
  @Override
  public ResponseContext getError() {
    return error;
  }

  /*
   * (non-Javadoc)
   * 
   * @see com.github.mrstampy.gameboot.exception.GameBootThrowable#setError(com.
   * github.mrstampy.gameboot.messages.error.Error)
   */
  /**
   * Sets the error.
   *
   * @param error
   *          the new error
   */
  @Override
  public void setError(ResponseContext error) {
    this.error = error;
  }

  /*
   * (non-Javadoc)
   * 
   * @see
   * com.github.mrstampy.gameboot.exception.GameBootThrowable#getErrorCode()
   */
  /**
   * Gets the error code.
   *
   * @return the error code
   */
  public Integer getErrorCode() {
    return errorCode;
  }

  /*
   * (non-Javadoc)
   * 
   * @see
   * com.github.mrstampy.gameboot.exception.GameBootThrowable#setErrorCode(java.
   * lang.Integer)
   */
  /**
   * Sets the error code.
   *
   * @param errorCode
   *          the new error code
   */
  public void setErrorCode(Integer errorCode) {
    this.errorCode = errorCode;
  }

}
